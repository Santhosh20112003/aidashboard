import { GoogleGenerativeAI } from "@google/generative-ai";
import Showdown from "showdown";
// import Unsplash, { toJson } from "unsplash/unsplash-js";

export const converter = new Showdown.Converter();
export const genAI = new GoogleGenerativeAI(
  "AIzaSyCVYbRztmqUamxjghxQYoqXTmwGnRD4Z7Q"
);

export const generationConfig = {
  temperature: 1.4,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
  responseSchema: {
    type: "object",
    properties: {
      language: { type: "string" },
      code: { type: "string" },
      explanation: { type: "string" },
      heading: { type: "string" },
    },
    required: ["language", "code", "explanation", "heading"],
  },
};

export const webGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
  responseSchema: {
    type: "object",
    properties: {
      type: {
        type: "string",
      },
      html: {
        type: "string",
      },
      css: {
        type: "string",
      },
      js: {
        type: "string",
      },
      frameworks: {
        type: "string",
      },
      code: {
        type: "string",
      },
      heading: {
        type: "string",
      },
      explanation: {
        type: "string",
      },
    },
    required: ["type", "heading", "explanation"],
  },
};

export const parts = [
  {
    text: "input: Create a basic webpage layout with a header, footer, and a main content section. Provide the HTML structure and the CSS for styling the layout.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n    \\n\\n\\n    \\n        My Website\\n        \\n            \\n                Home\\n                About\\n                Contact\\n            \\n        \\n    \\n    \\n        \\n            Welcome to my website!\\n            This is the main content area.\\n        \\n    \\n    \\n        © 2023 My Website\\n    \\n\\n",\n  "css": "body {\\n    font-family: sans-serif;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\nheader {\\n    background-color: #f0f0f0;\\n    padding: 20px;\\n    text-align: center;\\n}\\n\\nnav ul {\\n    list-style: none;\\n    padding: 0;\\n    margin: 0;\\n}\\n\\nnav li {\\n    display: inline;\\n    margin-right: 20px;\\n}\\n\\nmain {\\n    padding: 20px;\\n}\\n\\nfooter {\\n    background-color: #f0f0f0;\\n    padding: 10px;\\n    text-align: center;\\n}",\n  "js": "",\n  "frameworks": ["css"],\n  "Heading": "Basic Webpage Layout with Header, Main, and Footer",\n  "Explanation": "This code creates a basic webpage layout using HTML, CSS, and JavaScript. The HTML structure defines a header, main content area, and footer. The CSS styles the elements, providing a clean and simple look.  The CSS is separated into a dedicated stylesheet (`style.css`), adhering to best practices for maintainability and organization.  No JavaScript is needed for this basic layout. The structure is straightforward and modular, making it easy to expand upon with additional content and features. The use of semantic HTML5 elements (`header`, `main`, `footer`, `nav`, `section`) improves accessibility and SEO. The CSS is minimal, focusing on basic layout and styling without relying on any external frameworks. This approach prioritizes simplicity and maintainability."\n}',
  },
  {
    text: "input: Build a simple webpage with a button that, when clicked, displays a message. Include the HTML structure, CSS for styling, and JavaScript to handle the click event.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n    \\n\\n\\n    \\n        \\n        \\n    \\n    \\n",\n  "css": "body {\\n    font-family: sans-serif;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    min-height: 100vh;\\n    margin: 0;\\n    background-color: #f0f0f0;\\n}\\n\\n.container {\\n    text-align: center;\\n}\\n\\n#myButton {\\n    padding: 10px 20px;\\n    font-size: 16px;\\n    background-color: #4CAF50;\\n    color: white;\\n    border: none;\\n    border-radius: 5px;\\n    cursor: pointer;\\n}\\n\\n#message {\\n    margin-top: 20px;\\n    font-size: 18px;\\n}",\n  "js": "const button = document.getElementById(\'myButton\');\\nconst message = document.getElementById(\'message\');\\n\\nbutton.addEventListener(\'click\', () => {\\n    message.textContent = \'Hello! You clicked the button.\';\\n});",\n  "frameworks": ["css"],\n  "Heading": "Simple Webpage with Button Click Message",\n  "Explanation": "This code demonstrates a simple webpage with a button that displays a message when clicked.  The HTML structure sets up a button element with the ID `myButton` and a paragraph element with the ID `message` to display the output. The CSS styles the button and the message paragraph for better visual appeal, centering the elements on the page.  The JavaScript uses `addEventListener` to listen for a click event on the button. When the button is clicked, the `textContent` of the paragraph element is updated to display the message. The JavaScript code is concise and efficient, directly manipulating the DOM elements to update the content.  The separation of concerns (HTML structure, CSS styling, and JavaScript functionality) makes the code highly maintainable and readable. This approach is consistent with modern web development best practices."\n}',
  },
  {
    text: "input: Create a webpage with a form that validates the user's input when submitted. Include the HTML structure and JavaScript logic for form validation. Do not include styles.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n  \\n  \\n  \\n",\n  "css": "",\n  "js": "function validateForm() {\\n  let name = document.getElementById(\\"name\\").value;\\n  let email = document.getElementById(\\"email\\").value;\\n  let error = document.getElementById(\\"error\\");\\n  error.textContent = \\"\\"; // Clear previous errors\\n\\n  if (name === \\"\\" || email === \\"\\") {\\n    error.textContent = \\"Name and email are required.\\";\\n    return false;\\n  }\\n\\n  // Basic email validation\\n  if (!email.includes(\\"@\\")) {\\n    error.textContent = \\"Please enter a valid email address.\\";\\n    return false;\\n  }\\n\\n  return true; // Form is valid\\n}",\n  "frameworks": ["css"],\n  "Heading": "Webpage with Form Validation",\n  "Explanation": "This code creates a simple HTML form with two input fields: name and email.  The JavaScript function `validateForm()` is called when the form is submitted. This function checks if both name and email fields are filled. It performs a basic email validation checking for the presence of the \\"@\\" symbol.  If any of the fields are empty or the email is invalid, an error message is displayed, and the form submission is prevented.  If the form is valid (all fields are filled and the email is valid), the function returns `true`, allowing the form to submit.  The error messages are dynamically added to a paragraph element with id \\"error\\", providing user-friendly feedback.  This approach is a simple example of client-side form validation, offering immediate feedback to users without requiring a server-side check.  More comprehensive validation (e.g., using regular expressions for more robust email validation) can be implemented as needed."\n}',
  },
  {
    text: "input: Design a simple webpage layout using HTML and style it with TailwindCSS.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n    \\n\\n    \\n        \\n            \\n                \\n                    \\n                        My Website\\n                    \\n                \\n            \\n        \\n    \\n    \\n        Welcome!\\n        This is a simple webpage layout using Tailwind CSS.\\n    \\n    \\n        © 2023 My Website\\n    \\n\\n",\n  "css": "",\n  "js": "",\n  "frameworks": ["tailwindcss"],\n  "Heading": "Simple Webpage Layout with Tailwind CSS",\n  "Explanation": "This code implements a basic webpage layout using Tailwind CSS utility classes directly within the HTML.  The navigation bar (`nav`), main content area (`main`), and footer are structured using Tailwind classes for responsive design and styling.  The `style.css` file is intentionally left empty because Tailwind\'s classes are directly applied to the HTML elements.  This demonstrates how Tailwind can drastically reduce the amount of custom CSS required. The design is responsive due to Tailwind\'s built-in mobile-first approach. The layout is clear, concise, and easily customizable by modifying the existing Tailwind classes or adding new ones. The lack of custom CSS enhances maintainability and makes it easy to update the styling by adjusting Tailwind classes without altering the HTML structure.  This example showcases a basic but effective utilization of Tailwind CSS for rapid webpage prototyping and development."\n}',
  },
  {
    text: "input: Create a webpage with a card component using HTML and TailwindCSS. Add JavaScript functionality to toggle the card's content visibility on button click.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n  \\n    \\n      \\n        Card Title\\n        \\n      \\n      \\n        This is the content of the card.\\n      \\n    \\n  \\n  \\n",\n  "css": "",\n  "js": "const toggleButton = document.getElementById(\'toggleButton\');\\nconst cardContent = document.getElementById(\'cardContent\');\\n\\nlet isVisible = true;\\n\\ntoggleButton.addEventListener(\'click\', () => {\\n  isVisible = !isVisible;\\n  cardContent.style.display = isVisible ? \'block\' : \'none\';\\n  toggleButton.textContent = isVisible ? \'Show/Hide\' : \'Show\';\\n});",\n  "frameworks": ["tailwindcss"],\n  "Heading": "Tailwind CSS Card with Content Toggle",\n  "Explanation": "This code creates a card component using Tailwind CSS classes for styling.  The card includes a title and a button to toggle the visibility of its content.  The JavaScript code manages the visibility using the `style.display` property.  When the button is clicked, the `isVisible` variable is toggled, and the `cardContent`\'s display is set to `block` (visible) or `none` (hidden) accordingly. The button text also updates to reflect the current state.  The use of Tailwind CSS simplifies the styling, while the JavaScript adds interactive functionality, showcasing a common pattern in web development. The code is well-structured and easy to understand, with clear separation of concerns between HTML structure, CSS styling, and JavaScript behavior.  The use of Tailwind CSS results in a clean and responsive card design."\n}',
  },
  {
    text: "input: Build a webpage with a navigation bar and content section. Style the page using HTML and TailwindCSS, and include additional custom styles",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        \\n            My Website\\n            \\n                Home\\n                About\\n                Contact\\n            \\n        \\n    \\n    \\n        Welcome to my website!\\n        This is the main content area. You can add your content here.\\n        \\n    \\n    \\n        © 2023 My Website\\n    \\n\\n",\n  "css": "/* Custom styles */\\n.container {\\n    max-width: 960px;\\n}\\n\\nmain {\\n    padding: 2rem;\\n}",\n  "js": "",\n  "frameworks": ["tailwindcss"],\n  "Heading": "Tailwind CSS Navigation Bar and Content with Custom Styles",\n  "Explanation": "This code creates a webpage with a navigation bar and a main content section using Tailwind CSS for styling. The navigation bar is styled using Tailwind classes for background color, padding, and layout. The main content area uses Tailwind classes for padding, text styling, and layout.  Custom styles in `style.css` add a `max-width` to the container for better responsiveness and adjust the main content padding. This approach combines the speed and ease of use of Tailwind CSS with the flexibility of custom CSS to create a well-structured and visually appealing webpage.  The design is responsive because of Tailwind\'s built-in responsive design features. The separation of concerns – Tailwind classes for basic styling and custom CSS for more specific adjustments – promotes maintainability and organization.  This allows easy customization and adaptation of the page\'s look and feel."\n}',
  },
  {
    text: "input: Create a responsive webpage layout using HTML and style it with Bulma. ensure all styles are applied through a local CSS",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n  \\n    \\n      \\n        \\n          Bulma Responsive Layout\\n        \\n        \\n          A simple responsive layout using Bulma.\\n        \\n      \\n    \\n  \\n  \\n    \\n      \\n        \\n          Column 1\\n          Some content here.\\n        \\n        \\n          Column 2\\n          Some more content here.\\n        \\n      \\n    \\n  \\n\\n",\n  "css": "",\n  "js": "",\n  "frameworks": ["bulma"],\n  "Heading": "Responsive Webpage Layout with Bulma",\n  "Explanation": "This code creates a responsive webpage layout using Bulma CSS classes.  The structure uses Bulma\'s `hero`, `section`, `container`, and `columns` classes to create a visually appealing and responsive layout.  The `hero` class provides a full-height hero section for a prominent header. The `columns` class creates a two-column layout that adapts responsively to different screen sizes.  All styling is handled through the imported Bulma CSS file.  Bulma\'s built-in responsive features ensure that the layout adapts gracefully to various screen sizes and devices.  The code uses semantic HTML elements and is easy to extend with additional content.  The use of Bulma simplifies the development process by providing pre-built CSS classes for common layout elements, making it easy to create a visually appealing and responsive design without writing extensive CSS code. Note that while the JSON indicates a local CSS file, Bulma\'s responsiveness relies on the included CSS file, which in this case imports Bulma\'s stylesheet via a CDN link.  To make it fully functional with a truly local CSS file would require downloading Bulma\'s CSS and including it locally."\n}',
  },
  {
    text: "input: Build a webpage with a card grid using HTML and Bulma. Add JavaScript to handle dynamic sorting of the cards when a button is clicked.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n  \\n    \\n    \\n      \\n        \\n          \\n            Card 1\\n            Content 1\\n          \\n        \\n      \\n      \\n        \\n          \\n            Card 2\\n            Content 2\\n          \\n        \\n      \\n      \\n        \\n          \\n            Card 3\\n            Content 3\\n          \\n        \\n      \\n    \\n  \\n \\n",\n  "css": "",\n  "js": "const sortButton = document.getElementById(\'sortButton\');\\nconst cardGrid = document.getElementById(\'cardGrid\');\\n\\nsortButton.addEventListener(\'click\', () => {\\n  const cards = Array.from(cardGrid.children);\\n  cards.sort((a, b) => {\\n    const titleA = a.querySelector(\'.title\').textContent.toLowerCase();\\n    const titleB = b.querySelector(\'.title\').textContent.toLowerCase();\\n    return titleA.localeCompare(titleB);\\n  });\\n  cards.forEach(card => cardGrid.appendChild(card));\\n});",\n  "frameworks": ["bulma"],\n  "Heading": "Bulma Card Grid with JavaScript Sorting",\n  "Explanation": "This code creates a card grid using Bulma\'s `columns` and `card` classes.  JavaScript dynamically sorts the cards alphabetically based on their title when the button is clicked. The JavaScript code selects all the card elements, sorts them using `localeCompare` for case-insensitive sorting, and then reappends them to the grid in the sorted order.  Bulma provides the layout structure, while JavaScript adds the interactive sorting functionality. This demonstrates how to combine a CSS framework with JavaScript to create dynamic and interactive web pages. The solution uses efficient DOM manipulation and a clean sorting algorithm. The code is well-structured and easy to understand, with comments explaining each step.  The use of Bulma allows for rapid development of a visually appealing card layout, while JavaScript enhances the user experience by providing interactive sorting."\n}',
  },
  {
    text: "input: Design a webpage with a footer and content section, styled using Bulma and additional custom CSS for specific layout adjustments.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n  \\n    \\n      Welcome to my webpage!\\n      This is some example content.\\n      This is a paragraph of text.  You can add more content here as needed.  Bulma makes it easy to style your content with a consistent look and feel.\\n    \\n  \\n  \\n    \\n      \\n        Bulma by Bulma.io. The source code is licensed\\n        MIT.\\n      \\n    \\n  \\n\\n",\n  "css": "/* Custom CSS */\\n.section {\\n    padding: 5rem 0;\\n}\\n\\n.container {\\n    max-width: 960px;\\n    margin: 0 auto;\\n}\\n\\nfooter {\\n    background-color: #f5f5f5;\\n    padding: 2rem 0;\\n}",\n  "js": "",\n  "frameworks": ["bulma"],\n  "Heading": "Bulma Footer and Content with Custom CSS",\n  "Explanation": "This code creates a webpage with a content section and a footer using Bulma.  The content section uses Bulma\'s `section` and `container` classes for basic layout. The footer is styled using Bulma\'s `footer` class.  Custom CSS is added to adjust padding and styling for a more customized appearance. The custom CSS provides additional control over spacing, container width, and footer styling, allowing for a more refined visual design.  Bulma\'s classes provide a foundation for a clean and consistent layout, while the custom CSS allows for precise tailoring to specific design needs. This approach promotes efficient development by leveraging Bulma\'s pre-built styles and adding custom CSS only where necessary for precise design control.  The separation of concerns makes the code more maintainable and allows for easier updates and modifications."\n}',
  },
  {
    text: "input: Create a simple webpage layout using HTML and style it with PureCSS.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n   \\n\\n    \\n        \\n            \\n                Home\\n                About\\n                Contact\\n            \\n        \\n        \\n            Welcome to my website\\n            This is the main content area.\\n        \\n    \\n\\n",\n  "css": "body {\\n    font-family: sans-serif;\\n}\\n\\n.sidebar {\\n    background-color: #f0f0f0;\\n    padding: 20px;\\n}\\n\\n.content {\\n    padding: 20px;\\n}",\n  "js": "",\n  "frameworks": ["purecss"],\n  "Heading": "Simple PureCSS Layout",\n  "Explanation": "This code demonstrates a simple webpage layout using Pure.css. The HTML utilizes Pure\'s grid system (`pure-g`, `pure-u-1`, `pure-u-md-1-3`, `pure-u-md-2-3`) to create a two-column layout that adapts responsively. The `sidebar` div contains a navigation menu, while the `content` div holds the main content.  The `style.css` file provides custom styling to adjust background color and padding.  Pure.css provides the basic grid layout and normalization, while the custom CSS adds specific styling. This combination allows for creating a responsive layout with minimal code. This approach emphasizes simplicity and flexibility, allowing easy customization and addition of new elements without extensive CSS modifications.  This example showcases the effective use of Pure.css for building clean, responsive web pages with minimal code."\n}',
  },
  {
    text: "input: Create a webpage with a button that displays a modal dialog. Use HTML for the structure, PureCSS for styling, and JavaScript for handling the modal's opening and closing.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n\\n    \\n        \\n            ×\\n            This is the modal content.\\n        \\n    \\n\\n",\n  "css": "body {\\n    font-family: sans-serif;\\n}\\n\\n.modal {\\n    display: none; /* Hidden by default */\\n    position: fixed; /* Stay in place */\\n    z-index: 1; /* Sit on top */\\n    left: 0;\\n    top: 0;\\n    width: 100%; /* Full width */\\n    height: 100%; /* Full height */\\n    overflow: auto; /* Enable scroll if needed */\\n    background-color: rgb(0,0,0); /* Fallback color */\\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\\n}\\n\\n.modal-content {\\n    background-color: #fefefe;\\n    margin: 15% auto; /* 15% from the top and centered */\\n    padding: 20px;\\n    border: 1px solid #888;\\n    width: 300px;\\n}\\n\\n.close-button {\\n    color: #aaa;\\n    float: right;\\n    font-size: 28px;\\n    font-weight: bold;\\n}\\n\\n.close-button:hover, \\n.close-button:focus {\\n    color: black;\\n    text-decoration: none;\\n    cursor: pointer;\\n}",\n  "js": "const openModalButton = document.getElementById(\'openModal\');\\nconst modal = document.getElementById(\'modal\');\\nconst closeButton = document.querySelector(\'.close-button\');\\n\\nopenModalButton.addEventListener(\'click\', () => {\\n  modal.style.display = \'block\';\\n});\\n\\nfunction closeModal() {\\n  modal.style.display = \'none\';\\n}",\n  "frameworks": ["purecss"],\n  "Heading": "PureCSS Modal Dialog",\n  "Explanation": "This code creates a simple modal dialog using HTML, CSS, and JavaScript. The HTML structure includes a button to open the modal and the modal itself, which is initially hidden. The CSS styles the modal using basic positioning, background, and content styling. The JavaScript code handles the opening and closing of the modal. When the button is clicked, the modal\'s `display` property is set to `block`, making it visible. The close button\'s `onclick` event calls the `closeModal` function, which sets the modal\'s `display` property back to `none`, hiding it.  Pure.css is not directly used for layout in this example because the modal\'s positioning and styling are implemented with custom CSS. The combination of HTML structure, custom CSS, and JavaScript provides a functional and customizable modal dialog."\n}',
  },
  {
    text: "input: Build a webpage with a sidebar layout styled with PureCSS. Include additional custom CSS for the sidebar’s responsiveness and appearance.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        \\n            \\n        \\n        \\n            \\n                Sidebar\\n                \\n                    Home\\n                    About\\n                    Contact\\n                \\n            \\n        \\n        \\n            \\n                Main Content\\n            \\n            \\n                This is the main content area.  You can add your content here.\\n            \\n        \\n    \\n\\n",\n  "css": "body {\\n    font-family: sans-serif;\\n}\\n\\n#layout {\\n    width: 100%;\\n}\\n\\n#menu {\\n    background-color: #f0f0f0;\\n    width: 250px;\\n    display: block;\\n}\\n\\n#main {\\n    padding: 20px;\\n}\\n\\n#menuLink {\\n    display: none;\\n}\\n\\n@media (max-width: 768px) {\\n    #menu {\\n        display: none;\\n    }\\n    #menuLink {\\n        display: block;\\n        background-color: #f0f0f0;\\n        padding: 10px;\\n        cursor: pointer;\\n    }\\n}\\n\\n/* Responsive adjustments for the sidebar */\\n@media (max-width: 768px) {\\n  #layout {\\n    position: relative;\\n  }\\n  #menu {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    height: 100%;\\n    width: 200px; /* Reduce width for smaller screens */\\n    transform: translateX(-100%);\\n    transition: transform 0.3s ease;\\n  }\\n  #menuLink {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    z-index: 10;\\n  }\\n  #menuLink:hover ~ #menu {\\n    transform: translateX(0);\\n  }\\n  #main {\\n    margin-left: 200px;\\n    transition: margin-left 0.3s ease;\\n  }\\n  #menuLink:hover ~ #main {\\n    margin-left: 0;\\n  }\\n}",\n  "js": "",\n  "frameworks": ["purecss"],\n  "Heading": "PureCSS Sidebar Layout with Responsive Custom CSS",\n  "Explanation": "This code creates a sidebar layout using Pure.css and custom CSS for responsiveness. The HTML structure uses Pure.css\'s menu component, but the responsive behavior is handled with custom CSS media queries.  For screens smaller than 768px, the sidebar is hidden by default and a menu link is shown to toggle its visibility. The custom CSS handles the responsive behavior, including hiding the sidebar on smaller screens and showing a menu link to reveal it. This example demonstrates the combination of Pure.css for basic layout elements with custom CSS for creating responsive behavior and advanced styling. The custom CSS uses media queries to dynamically adjust the layout based on screen size, ensuring responsiveness across different devices.  The use of transitions makes the sidebar\'s appearance smooth and user-friendly."\n}',
  },
  {
    text: "input: Design a webpage using HTML and style it with Bootstrap. apply Bootstrap styles through a local CSS.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        \\n            Navbar\\n            \\n            \\n                \\n                    \\n                        Home\\n                    \\n                    \\n                        Features\\n                    \\n                    \\n                        Pricing\\n                    \\n                \\n            \\n        \\n    \\n    \\n        \\n            \\n                Main Content\\n                This is some example content.\\n            \\n            \\n                Sidebar\\n                This is the sidebar.\\n            \\n        \\n    \\n\\n",\n  "css": "",\n  "js": "",\n  "frameworks": ["bootstrap"],\n  "Heading": "Bootstrap Webpage Layout",\n  "Explanation": "This code demonstrates a basic webpage layout using Bootstrap\'s grid system and navbar component.  The navbar is a responsive navigation bar that collapses on smaller screens. The main content and a sidebar are arranged using Bootstrap\'s row and column classes for responsive layout.  The `style.css` file (not shown but crucial) would need to contain the entire compiled Bootstrap CSS for this code to work correctly.  Remember to download the compiled Bootstrap CSS from the official Bootstrap website and place it in a file named `style.css` in the same directory as the HTML file.  This approach leverages Bootstrap\'s pre-built components and grid system to quickly create a responsive and well-structured webpage without writing extensive CSS code from scratch.  Note that this JSON response only provides the HTML structure; the actual functionality depends entirely on having a properly included Bootstrap CSS file."\n}',
  },
  {
    text: "input: Build a webpage layout with a header and footer styled with HTML and Bootstrap. Add custom CSS to style the content section, ensuring no CDN links for Bootstrap.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        \\n            My Website\\n        \\n    \\n    \\n        \\n            Main Content\\n            This is the main content area.\\n        \\n    \\n    \\n        \\n            © 2023 My Website\\n        \\n    \\n\\n",\n  "css": "#content {\\n    background-color: #f0f0f0;\\n    padding: 20px;\\n    margin-top: 20px;\\n    border-radius: 5px;\\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\\n}\\n\\nbody {\\n    font-family: sans-serif;\\n}",\n  "js": "",\n  "frameworks": ["bootstrap"],\n  "Heading": "Bootstrap Header and Footer with Custom Content Styling",\n  "Explanation": "This code creates a webpage layout with a header and footer using Bootstrap classes for basic styling and structure.  The header and footer are styled using Bootstrap utility classes for background color, text color, and padding.  Custom CSS is added in `style.css` to style the content section.  The custom CSS gives the content section a background color, padding, margin, border radius, and a subtle box shadow, enhancing its visual appeal and separation from the header and footer. Bootstrap provides the basic structure and responsive capabilities, while the custom CSS allows for precise design control over the content section\'s appearance.  Remember that the Bootstrap CSS needs to be included separately (not via CDN) for this example to work as intended. This approach combines the efficiency of Bootstrap for layout with custom CSS for fine-grained styling control, promoting maintainability and efficient design implementation."\n}',
  },
  {
    text: "input: Create a webpage with a collapsible navigation menu using HTML and Bootstrap. Add JavaScript logic to toggle the menu when the user clicks on a button.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n    \\n      \\n        \\n        \\n          \\n            \\n              Home\\n            \\n            \\n              Features\\n            \\n            \\n              \\n                Dropdown link\\n              \\n              \\n                Action\\n                Another action\\n                Something else here\\n              \\n            \\n          \\n        \\n      \\n    \\n\\n",\n  "css": "",\n  "js": "const toggleButton = document.getElementById(\'toggleButton\');\\nconst navMenu = document.getElementById(\'navMenu\');\\n\\ntoggleButton.addEventListener(\'click\', () => {\\n  navMenu.classList.toggle(\'show\');\\n});",\n  "frameworks": ["bootstrap"],\n  "Heading": "Bootstrap Collapsible Navigation with JavaScript Toggle",\n  "Explanation": "This code creates a collapsible navigation menu using Bootstrap. The menu is initially collapsed and can be toggled open and closed using a button. The `navMenu` element uses Bootstrap\'s navbar classes for styling.  The custom JavaScript code adds the class `show` to the `navMenu` when the button is clicked.  Bootstrap\'s CSS handles the visual appearance of the menu when the `show` class is added. The `toggleButton` triggers the toggling of the `show` class, which is Bootstrap\'s mechanism for controlling the collapse/expand behavior of navbar components.  This allows for a simple way to show and hide the navigation menu without manually manipulating CSS properties.  Note: this solution uses Bootstrap\'s built-in collapse functionality, making it more efficient than manually managing the display property. Remember to include the compiled Bootstrap JavaScript and CSS files separately for this to function correctly."\n}',
  },
  {
    text: "input: Design a webpage layout using HTML and style it with UIkit. Ensure that the styles are applied locally",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        \\n            \\n                \\n                    UIkit Layout\\n                \\n                \\n                    \\n                        Home\\n                        About\\n                        Contact\\n                    \\n                \\n            \\n        \\n        \\n            \\n                \\n                    \\n                        Sidebar Content\\n                    \\n                \\n                \\n                    \\n                        Main Content\\n                    \\n                \\n            \\n        \\n    \\n\\n",\n  "css": "",\n  "js": "",\n  "frameworks": ["uikit"],\n  "Heading": "UIkit Webpage Layout",\n  "Explanation": "This code demonstrates a webpage layout using UIkit. The HTML structure uses UIkit\'s grid system (`uk-grid`, `uk-width-1-3@m`, `uk-width-2-3@m`) to create a two-column layout that adapts to different screen sizes.  UIkit\'s navbar component is used for the navigation, and cards (`uk-card`) are used to style the content sections. The styling is done using UIkit\'s CSS classes; this example relies on UIkit\'s pre-built CSS, which would need to be downloaded and included in a `style.css` file in the same directory as the HTML file.  The `style.css` file would need to contain the entire compiled UIkit CSS for this code to work correctly. Download the compiled UIkit CSS from the official UIkit website and include it in a `` tag in your `head` section to use this example.  This approach leverages UIkit\'s pre-built components and grid system to create a responsive and visually appealing layout efficiently."\n}',
  },
  {
    text: "input: Build a webpage with a grid layout using HTML and UIkit. Add JavaScript logic to filter the displayed items based on a search query.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n    \\n        \\n            Item 1\\n        \\n        \\n            Item 2\\n        \\n        \\n            Item 3\\n        \\n        \\n            Item 4\\n        \\n        \\n            Item 5\\n        \\n    \\n\\n",\n  "css": "",\n  "js": "const searchInput = document.getElementById(\'searchInput\');\\nconst gridItems = document.querySelectorAll(\'.uk-grid > div\');\\n\\nsearchInput.addEventListener(\'input\', () => {\\n  const searchQuery = searchInput.value.toLowerCase();\\n  gridItems.forEach(item => {\\n    const itemText = item.textContent.toLowerCase();\\n    if (itemText.includes(searchQuery)) {\\n      item.style.display = \'block\';\\n    } else {\\n      item.style.display = \'none\';\\n    }\\n  });\\n});",\n  "frameworks": ["uikit"],\n  "Heading": "UIkit Grid with JavaScript Filtering",\n  "Explanation": "This code creates a grid layout using UIkit\'s grid system.  A search input allows users to filter the items displayed in the grid.  The JavaScript code listens for changes in the search input. When the input changes, it iterates through each grid item, checks if its text content includes the search query (case-insensitive), and shows or hides the item accordingly.  UIkit provides the grid structure, while JavaScript handles the filtering logic.  This approach combines the ease of use of UIkit\'s grid system with custom JavaScript for dynamic content filtering.  Remember that this requires a correctly linked UIkit CSS file for proper styling.  The JavaScript code is efficient, directly manipulating the `display` property of each grid item for better performance compared to adding and removing classes."\n}',
  },
  {
    text: "input: Create a webpage with a sidebar and content section, using HTML and UIkit for styling. Include custom CSS for specific styling details for the sidebar.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        \\n            \\n                \\n                    Navigation\\n                    Home\\n                    About\\n                    Services\\n                    Contact\\n                \\n            \\n        \\n        \\n            \\n                Main Content\\n                This is the main content area.\\n            \\n        \\n    \\n\\n",\n  "css": "body {\\n    font-family: sans-serif;\\n}\\n\\n.sidebar {\\n    background-color: #f0f0f0;\\n    padding: 20px;\\n}\\n\\n.sidebar ul {\\n    list-style: none;\\n    padding: 0;\\n}\\n\\n.sidebar li a {\\n    display: block;\\n    padding: 10px;\\n    text-decoration: none;\\n    color: #333;\\n}\\n\\n.sidebar li a:hover {\\n    background-color: #ddd;\\n}",\n  "js": "",\n  "frameworks": ["uikit"],\n  "Heading": "UIkit Sidebar Layout with Custom CSS",\n  "Explanation": "This code creates a sidebar layout using UIkit\'s flexbox utilities (`uk-flex`, `uk-width-1-4@m`, `uk-width-expand`) for responsive layout.  The sidebar uses UIkit\'s navigation component (`uk-nav`) for styling.  The custom CSS styles the sidebar with background color, padding, list styles, and link styling.  UIkit\'s classes provide a foundation for a clean layout, while custom CSS allows fine-tuning of the sidebar\'s appearance. This approach combines the power of UIkit\'s grid system with the flexibility of custom CSS for creating a visually appealing and responsive layout. Remember that this requires including the UIkit CSS file locally for the styling to work correctly.  This ensures a clean separation of concerns and easier customization and maintenance."\n}',
  },
  {
    text: "input: Create a webpage with a countdown timer that displays the remaining time until a specific event. Use HTML for the layout and JavaScript for the countdown logic.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n  Countdown Timer\\n  Time until the event:\\n  \\n  \\n",\n  "css": "",\n  "js": "const countdownElement = document.getElementById(\'countdown\');\\n\\n// Set the target date and time (replace with your event date and time)\\nconst targetDate = new Date(\'2024-03-15T10:00:00\');\\n\\nfunction updateCountdown() {\\n  const now = new Date();\\n  const timeLeft = targetDate - now;\\n\\n  if (timeLeft < 0) {\\n    countdownElement.innerHTML = \'Event has passed!\';\\n    return;\\n  }\\n\\n  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\\n  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\\n  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\\n  const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);\\n\\n  countdownElement.innerHTML = `${days}d ${hours}h ${minutes}m ${seconds}s`;\\n}\\n\\nsetInterval(updateCountdown, 1000); // Update every second\\nupdateCountdown(); // Initial update",\n  "frameworks": ["css"],\n  "Heading": "Countdown Timer Webpage",\n  "Explanation": "This code creates a simple webpage displaying a countdown timer. The HTML sets up a heading and a `div` element to display the countdown.  The JavaScript code calculates the time remaining until a specified target date and time.  The `updateCountdown` function calculates the days, hours, minutes, and seconds remaining. The `setInterval` function calls `updateCountdown` every second to update the display. If the target date has passed, it displays a message indicating this.  The target date is hardcoded; you should replace it with your desired event date and time.  This implementation uses basic JavaScript date and time manipulation for simplicity and efficiency. The countdown is updated every second for real-time display."\n}',
  },
  {
    text: "input: Build a webpage that fetches and displays data from an external API, such as a weather service. Include the HTML structure and JavaScript to make the API request and display the data dynamically.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n  Weather Data\\n  \\n\\n",\n  "css": "",\n  "js": "const weatherDataElement = document.getElementById(\'weatherData\');\\n\\nconst apiKey = \'YOUR_API_KEY\'; // Replace with your API key\\nconst apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=London&appid=${apiKey}&units=metric`; //Example API URL - replace London with your desired city\\n\\nfetch(apiUrl)\\n  .then(response => response.json())\\n  .then(data => {\\n    if (data.cod === 200) {\\n        const weatherInfo = `\\n        ${data.name}, ${data.sys.country}\\n        Temperature: ${data.main.temp}°C\\n        Description: ${data.weather[0].description}\\n        Humidity: ${data.main.humidity}%\\n        Wind Speed: ${data.wind.speed} m/s\\n      `;\\n      weatherDataElement.innerHTML = weatherInfo;\\n    } else {\\n      weatherDataElement.innerHTML = `Error: ${data.message}`;\\n    }\\n  })\\n  .catch(error => {\\n    weatherDataElement.innerHTML = `Error fetching data: ${error}`;\\n  });",\n  "frameworks": ["css"],\n  "Heading": "Fetching and Displaying Weather Data",\n  "Explanation": "This code fetches weather data from the OpenWeatherMap API and displays it on a webpage.  The HTML sets up a `div` to hold the fetched data.  The JavaScript code makes a `fetch` request to the API.  The `.then()` methods handle the response:  the first converts the response to JSON, the second checks for API errors (`cod` not equal to 200) and if successful, constructs an HTML string with the weather information and displays it in the `weatherDataElement`.  An error message is displayed if the request fails or the API returns an error. Remember to replace `YOUR_API_KEY` with your actual OpenWeatherMap API key and `London` with the desired city.  This example uses the OpenWeatherMap API; you can adapt it to other APIs by changing the `apiUrl` and how you parse the data."\n}',
  },
  {
    text: "input: Create a webpage that integrates with an external JavaScript library like Chart.js to display a bar chart. Use HTML to structure the page, and include JavaScript to configure and render the chart.",
  },
  {
    text: "output: {\n  \"type\": \"html\",\n  \"html\": \"\\n\\n\\n\\n\\n\\n  \\n  \\n\\n\",\n  \"css\": \"\",\n  \"js\": \"const ctx = document.getElementById('myChart').getContext('2d');\\n\\nconst myChart = new Chart(ctx, {\\n    type: 'bar',\\n    data: {\\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\\n        datasets: [{\\n            label: '# of Votes',\\n            data: [12, 19, 3, 5, 2, 3],\\n            backgroundColor: [\\n                'rgba(255, 99, 132, 0.2)',\\n                'rgba(54, 162, 235, 0.2)',\\n                'rgba(255, 206, 86, 0.2)',\\n                'rgba(75, 192, 192, 0.2)',\\n                'rgba(153, 102, 255, 0.2)',\\n                'rgba(255, 159, 64, 0.2)'\\n            ],\\n            borderColor: [\\n                'rgba(255, 99, 132, 1)',\\n                'rgba(54, 162, 235, 1)',\\n                'rgba(255, 206, 86, 1)',\\n                'rgba(75, 192, 192, 1)',\\n                'rgba(153, 102, 255, 1)',\\n                'rgba(255, 159, 64, 1)'\\n            ],\\n            borderWidth: 1\\n        }]\\n    },\\n    options: {\\n        scales: {\\n            y: {\\n                beginAtZero: true\\n            }\\n        }\\n    }\\n});\",\n  \"frameworks\": [\"css\"],\n  \"Heading\": \"Chart.js Bar Chart Integration\",\n  \"Explanation\": \"This code creates a webpage that displays a bar chart using Chart.js. The HTML includes a `` element where the chart will be rendered.  The JavaScript code uses the Chart.js library to create a bar chart with sample data. The data includes labels for the x-axis and data values for the y-axis.  The options object configures the chart's appearance, such as the y-axis starting at zero.  This example uses a CDN link for Chart.js; for a local version, download the Chart.js library and reference the local file path instead of the CDN link.  The chart is dynamically generated in the browser using JavaScript. This approach demonstrates how to integrate a JavaScript library to enhance a webpage's functionality with interactive data visualizations.\"\n}",
  },
  {
    text: "input: Create a webpage that displays a line chart using Chart.js. Use HTML for the structure, CSS for styling the page, and ensure the chart container is styled professionally.",
  },
  {
    text: "output: {\n  \"type\": \"html\",\n  \"html\": \"\\n\\n\\n\\n\\n\\n  \\n    \\n  \\n  \\n  \\n\",\n  \"css\": \"body {\\n    font-family: sans-serif;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    min-height: 100vh;\\n    margin: 0;\\n    background-color: #f4f4f4;\\n}\\n\\n.chart-container {\\n    background-color: #fff;\\n    padding: 20px;\\n    border-radius: 8px;\\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\\n}\\n\\n#myChart {\\n    max-width: 800px;\\n    margin: 0 auto;\\n}\",\n  \"js\": \"const ctx = document.getElementById('myChart').getContext('2d');\\n\\nconst data = {\\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\\n  datasets: [{\\n    label: 'Sales Data',\\n    data: [12, 19, 3, 5, 2, 3, 15],\\n    borderColor: 'rgb(75, 192, 192)',\\n    backgroundColor: 'rgba(75, 192, 192, 0.2)',\\n    tension: 0.4\\n  }]\\n};\\n\\nconst config = {\\n  type: 'line',\\n  data: data,\\n  options: {\\n    responsive: true,\\n    plugins: {\\n      title: {\\n        display: true,\\n        text: 'Monthly Sales Data'\\n      }\\n    },\\n    scales: {\\n      y: {\\n        beginAtZero: true\\n      }\\n    }\\n  }\\n};\\n\\nconst myChart = new Chart(ctx, config);\",\n  \"frameworks\": [\"css\"],\n  \"Heading\": \"Chart.js Line Chart with Custom Styling\",\n  \"Explanation\": \"This code creates a line chart using Chart.js and includes custom CSS for styling. The HTML provides a container for the chart. The CSS styles the container with background color, padding, border radius, and box shadow. The JavaScript configures and renders the line chart with sample data. The chart is responsive, adapting to the container's size.  The chart title and axis labels are set for clarity.  This approach demonstrates how to integrate Chart.js for data visualization while using CSS for a professional and visually appealing presentation.\"\n}",
  },
  {
    text: "input: Build a webpage that displays a pie chart using D3.js. Use TailwindCSS for styling the layout, and ensure the page has a responsive design.",
  },
  {
    text: "output: {\n  \"type\": \"html\",\n  \"html\": \"\\n\\n\\n\\n\\n\\n\\n  \\n    D3.js Pie Chart\\n    \\n  \\n\\n\",\n  \"css\": \"\",\n  \"js\": \"const width = 600;\\nconst height = 400;\\nconst radius = Math.min(width, height) / 2;\\n\\nconst data = {\\n  labels: ['A', 'B', 'C', 'D'],\\n  values: [20, 30, 15, 35]\\n};\\n\\nconst svg = d3.select('#pieChart')\\n  .append('svg')\\n  .attr('width', width)\\n  .attr('height', height)\\n  .append('g')\\n  .attr('transform', `translate(${width / 2}, ${height / 2})`)\\n\\nconst color = d3.scaleOrdinal()\\n  .domain(data.labels)\\n  .range(['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0']);\\n\\nconst pie = d3.pie()(data.values);\\nconst arc = d3.arc().innerRadius(0).outerRadius(radius);\\n\\nsvg.selectAll('path')\\n  .data(pie)\\n  .enter()\\n  .append('path')\\n  .attr('d', arc)\\n  .attr('fill', d => color(data.labels[data.values.indexOf(d.data)]))\\n  .attr('stroke', 'white')\\n  .attr('stroke-width', 2);\",\n  \"frameworks\": [\"tailwindcss\"],\n  \"Heading\": \"D3.js Pie Chart with Tailwind CSS\",\n  \"Explanation\": \"This code creates a pie chart using D3.js and styles it with Tailwind CSS.  The HTML structure includes a container for the chart. Tailwind CSS classes provide responsive styling and layout. The D3.js code creates the pie chart using the provided data.  The chart is dynamically generated using D3's methods to create SVG elements.  Tailwind CSS provides a clean and responsive layout, while D3.js handles the creation and rendering of the pie chart.  The chart adapts to different screen sizes due to Tailwind's responsive design features.  This example demonstrates a well-structured approach to integrating D3.js for data visualization with a modern CSS framework for responsive design.\"\n}",
  },
  {
    text: "input: Design a webpage using HTML and Bulma that integrates a sortable data table using the DataTables.js library. Use Bulma for styling the table and layout. and all styles come from the local Bulma file.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n\\n\\n\\n\\n  \\n    \\n      \\n        \\n        \\n        \\n        \\n        \\n        \\n      \\n    \\n    \\n      \\n        \\n        \\n        \\n        \\n        \\n        \\n      \\n      \\n        \\n        \\n        \\n        \\n        \\n        \\n      \\n      \\n        \\n        \\n        \\n        \\n        \\n        \\n      \\n      \\n        \\n        \\n        \\n        \\n        \\n        \\n      \\n    \\n  NamePositionOfficeAgeStart dateSalaryTiger NixonSystem ArchitectEdinburgh612011/04/25$320,800Garrett WintersAccountantTokyo632011/07/25$170,750Ashton CoxJunior Technical AuthorSan Francisco662009/01/12$86,000Cedric KellySenior Javascript DeveloperEdinburgh222012/03/29$433,060\\n  \\n\\n",\n  "css": "",\n  "js": "",\n  "frameworks": ["bulma"],\n  "Heading": "Bulma DataTables Integration",\n  "Explanation": "This code creates a sortable data table using Bulma for styling and DataTables.js for functionality. The HTML sets up a basic table with header and body rows.  The DataTables.js library is included via CDN. The JavaScript code initializes the DataTable on the `myTable` element. Bulma\'s CSS classes style the table.  Note that this example uses CDN links for DataTables.js and its Bootstrap integration.  To use this without CDNs, you would need to download the DataTables.js files (and the Bootstrap integration files if you want that styling), place them in your project, and change the `',
  },
  {
    text: "input: Build a webpage using HTML and Bootstrap that visualizes data with ApexCharts.js. Use Bootstrap for layout and styling, and ensure the chart container is styled professionally. all styles should come from a local Bootstrap file.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n  \\n  \\n  \\n\\n\\n  \\n    \\n      \\n        \\n          \\n            \\n          \\n        \\n      \\n    \\n  \\n  \\n  \\n\\n",\n  "css": "",\n  "js": "",\n  "frameworks": ["bootstrap"],\n  "Heading": "ApexCharts with Bootstrap Styling",\n  "Explanation": "This code demonstrates a webpage that integrates ApexCharts.js for data visualization within a Bootstrap layout. The HTML uses Bootstrap\'s grid system to create a responsive layout. The chart is contained within a Bootstrap card for professional presentation. The JavaScript code configures and renders an ApexCharts bar chart.  Note that this example uses a CDN for ApexCharts.js.  To use this without CDNs, you would need to download the ApexCharts.js file, place it in your project, and modify the `',
  },
  {
    text: "input: Create a webpage that fetches and displays weather data from an external API like OpenWeatherMap. Use CSS to style the page, ensuring it looks professional and responsive.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        Weather App\\n        \\n    \\n\\n",\n  "css": "body {\\n    font-family: sans-serif;\\n    margin: 0;\\n    background-color: #f0f0f0;\\n}\\n\\n.container {\\n    max-width: 600px;\\n    margin: 2rem auto;\\n    background-color: white;\\n    padding: 2rem;\\n    border-radius: 8px;\\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\\n}\\n\\n.title {\\n    text-align: center;\\n    color: #333;\\n    margin-bottom: 1rem;\\n}\\n\\n#weatherData {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n}\\n\\n#weatherData > * {\\n    margin-bottom: 1rem;\\n}\\n\\nimg {\\n    max-width: 100%;\\n    height: auto;\\n}",\n  "js": "const apiKey = \'YOUR_API_KEY\'; // Replace with your API key\\nconst apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=London&appid=${apiKey}&units=metric`;\\nconst weatherData = document.getElementById(\'weatherData\');\\n\\nfetch(apiUrl)\\n  .then(response => response.json())\\n  .then(data => {\\n    if (data.cod === 200) {\\n      const iconUrl = `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`;\\n      const weatherInfo = `\\n        ${data.name}, ${data.sys.country}\\n        \\n        Temperature: ${data.main.temp}°C\\n        Description: ${data.weather[0].description}\\n        Humidity: ${data.main.humidity}%\\n        Wind Speed: ${data.wind.speed} m/s\\n      `;\\n      weatherData.innerHTML = weatherInfo;\\n    } else {\\n      weatherData.innerHTML = `Error fetching data.`;\\n    }\\n  })\\n  .catch(error => {\\n    weatherData.innerHTML = `Error: ${error}`;\\n  });",\n  "frameworks": ["css"],\n  "Heading": "Responsive Weather App with External CSS",\n  "Explanation": "This code fetches weather data and displays it using a separate CSS file for styling.  The HTML provides a container for the weather information.  The CSS styles the layout, making it responsive and visually appealing.  The JavaScript fetches data from OpenWeatherMap API, handles potential errors, and updates the HTML with the weather information. The CSS is designed for responsiveness, ensuring the layout adapts well to different screen sizes.  Remember to replace `YOUR_API_KEY` with your OpenWeatherMap API key and to include the CSS file in a `` tag in your HTML file.  The use of a separate CSS file promotes better organization and maintainability."\n}',
  },
  {
    text: "input: Build a webpage that fetches and displays cryptocurrency prices from an external API like CoinGecko. Use TailwindCSS to style the page, making it visually appealing and responsive.",
  },
  {
    text: "output: {\n  \"type\": \"html\",\n  \"html\": \"\\n\\n\\n  \\n\\n\\n  \\n    Cryptocurrency Prices\\n    \\n  \\n  \\n\",\n  \"css\": \"\",\n  \"js\": \"const apiKey = 'YOUR_API_KEY'; //Replace with your CoinGecko API key.  You may not need one.\\n    const apiUrl = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,dogecoin&order=market_cap_desc&per_page=100&page=1&sparkline=false';\\n\\n    fetch(apiUrl)\\n      .then(response => response.json())\\n      .then(data => {\\n        const cryptoPricesContainer = document.getElementById('cryptoPrices');\\n        data.forEach(crypto => {\\n          const cryptoDiv = document.createElement('div');\\n          cryptoDiv.classList.add('bg-white', 'p-4', 'rounded-lg', 'shadow-md', 'hover:shadow-xl', 'transition', 'duration-300');\\n          cryptoDiv.innerHTML = `\\n            ${crypto.name} (${crypto.symbol.toUpperCase()})\\n            Price: $${crypto.current_price.toFixed(2)}\\n            High 24h: $${crypto.high_24h.toFixed(2)}\\n            Low 24h: $${crypto.low_24h.toFixed(2)}\\n          `;\\n          cryptoPricesContainer.appendChild(cryptoDiv);\\n        });\\n      })\\n      .catch(error => {\\n        console.error('Error fetching data:', error);\\n        const cryptoPricesContainer = document.getElementById('cryptoPrices');\\n        cryptoPricesContainer.innerHTML = 'Error fetching cryptocurrency data.';\\n      });\\n  \",\n  \"frameworks\": [\"tailwindcss\"],\n  \"Heading\": \"Responsive Cryptocurrency Display with Tailwind CSS\",\n  \"Explanation\": \"This code fetches cryptocurrency prices from CoinGecko API and displays them using Tailwind CSS for styling. The HTML structure uses Tailwind classes for responsive grid layout and styling. The JavaScript fetches data from the API and dynamically creates elements to display cryptocurrency information using Tailwind classes for styling.  Error handling is included to display a message if data retrieval fails.  Tailwind CSS classes are directly applied to HTML elements for styling. No external stylesheets or CDN links are necessary. The design is responsive due to Tailwind's built-in responsive design capabilities.\"\n}",
  },
  {
    text: "input: Create a webpage that fetches and displays trending movies from an external API like TMDB. Use Bootstrap to style the page, ensuring the layout is modern and responsive.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n  \\n    Trending Movies\\n    \\n  \\n\\n",\n  "css": "",\n  "js": "const apiKey = \'YOUR_API_KEY\'; // Replace with your TMDB API key\\nconst apiUrl = `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`;\\n\\nfetch(apiUrl)\\n  .then(response => response.json())\\n  .then(data => {\\n    const movieContainer = document.getElementById(\'movieContainer\');\\n    data.results.forEach(movie => {\\n      const movieDiv = document.createElement(\'div\');\\n      movieDiv.classList.add(\'col\');\\n      movieDiv.innerHTML = `\\n        \\n          \\n          \\n            ${movie.title}\\n            Rating: ${movie.vote_average}\\n            Overview: ${movie.overview}\\n          \\n        \\n      `;\\n      movieContainer.appendChild(movieDiv);\\n    });\\n  })\\n  .catch(error => {\\n    console.error(\'Error fetching data:\', error);\\n  });",\n  "frameworks": ["bootstrap"],\n  "Heading": "Trending Movies with Bootstrap",\n  "Explanation": "This code fetches trending movies from TMDB and displays them using Bootstrap for layout and styling.  The HTML uses Bootstrap\'s grid system (`row`, `col`) for responsive layout. The JavaScript fetches data from the TMDB API and dynamically creates Bootstrap cards to display movie information.  Error handling is included to catch potential issues during data fetching.  The styling is managed through a local Bootstrap CSS file (not included here, but necessary for the code to work as intended), which is assumed to be linked in the HTML\'s `` section. Remember to replace `YOUR_API_KEY` with your TMDB API key. This approach combines Bootstrap\'s responsive design capabilities with dynamic data fetching and display for a modern and functional application."\n}',
  },
  {
    text: "input: Build a webpage that retrieves and displays live news articles from an external API like NewsAPI. Style the layout using PureCSS to make it clean and responsive.",
  },
  {
    text: 'output: {\n  "type": "html",\n  "html": "\\n\\n\\n    \\n    \\n    \\n\\n\\n    \\n        \\n            Latest News\\n            \\n        \\n    \\n\\n",\n  "css": "body {\\n    font-family: sans-serif;\\n}\\n\\n.title {\\n    text-align: center;\\n    margin-bottom: 1rem;\\n}\\n\\n.news-item {\\n    border: 1px solid #ccc;\\n    margin-bottom: 1rem;\\n    padding: 1rem;\\n    border-radius: 4px;\\n}\\n\\n.news-item img {\\n    max-width: 100%;\\n    height: auto;\\n    margin-bottom: 0.5rem;\\n}\\n\\n@media (min-width: 768px) {\\n    .news-item {\\n        display: flex;\\n    }\\n    .news-item img {\\n        width: 200px;\\n        margin-right: 1rem;\\n    }\\n}",\n  "js": "const apiKey = \'YOUR_API_KEY\'; // Replace with your News API key\\nconst apiUrl = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${apiKey}`;\\nconst newsContainer = document.getElementById(\'newsContainer\');\\n\\nfetch(apiUrl)\\n  .then(response => response.json())\\n  .then(data => {\\n    data.articles.forEach(article => {\\n      const newsItem = document.createElement(\'div\');\\n      newsItem.classList.add(\'news-item\');\\n      newsItem.innerHTML = `\\n        ${article.title}\\n        \\n        ${article.description}\\n        Read More\\n      `;\\n      newsContainer.appendChild(newsItem);\\n    });\\n  })\\n  .catch(error => {\\n    console.error(\'Error:\', error);\\n  });",\n  "frameworks": ["purecss"],\n  "Heading": "Responsive News App with PureCSS",\n  "Explanation": "This code fetches news articles from News API and displays them using PureCSS for styling.  The HTML structure uses Pure.css\'s grid system for layout.  The CSS provides styling for the news items, making them responsive and visually appealing.  The JavaScript handles the API request and dynamically adds news items to the page.  The CSS is designed to adapt the layout for different screen sizes. Remember to replace `YOUR_API_KEY` with your News API key and include the CSS file locally to ensure the styling is applied correctly.  The combination of PureCSS and dynamic content fetching creates a clean and functional news application."\n}',
  },
  {
    text: "input: create a login page with tailwindcss and add functionality to it",
  },
  {
    text: 'output: {"type": "html", "html": "\\n\\n  \\n    \\n      Login\\n      \\n      \\n    \\n  \\n\\n", "css": "", "js": "const loginForm = document.getElementById(\'loginForm\');\\nconst message = document.getElementById(\'message\');\\n\\nloginForm.addEventListener(\'submit\', (event) => {\\n  event.preventDefault(); // Prevent default form submission\\n\\n  const email = document.getElementById(\'email\').value;\\n  const password = document.getElementById(\'password\').value;\\n\\n  // Basic validation (replace with your actual authentication logic)\\n  if (email === \'user@example.com\' && password === \'password\') {\\n    message.textContent = \'Login successful!\';\\n    message.classList.add(\'text-green-500\');\\n  } else {\\n    message.textContent = \'Invalid email or password.\';\\n    message.classList.add(\'text-red-500\');\\n  }\\n});", "frameworks": ["tailwindcss"], "Heading": "Login Page with Tailwind CSS", "Explanation": "This code creates a simple login page using Tailwind CSS for styling. The HTML structure includes a form with email and password fields. Tailwind CSS classes are used for styling elements such as form fields, buttons, and layout. The JavaScript handles form submission, performs basic validation, and displays success or error messages.  Replace the placeholder authentication logic with your actual authentication mechanism.  This example uses inline Tailwind CSS classes. For a more organized approach, consider using a separate CSS file with Tailwind directives. The form is styled using Tailwind classes, making it visually appealing and consistent with the overall design. The JavaScript provides basic functionality to check credentials (replace this with your backend authentication); this shows the basic functionality and how to handle form submission and display messages."}',
  },
  { text: "input: " },
  { text: "output: " },
];

// export const unsplash = new Unsplash({
//   accessKey: "f67JNmI7cNKsusb5x59QG8L3ASZMJD5mDdd1zhSYkp8",
// });
